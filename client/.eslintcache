[{"C:\\Users\\Sergey\\Desktop\\quiz-galaxy\\client\\src\\pages\\makeTest\\index.js":"1","C:\\Users\\Sergey\\Desktop\\quiz-galaxy\\client\\src\\components\\GetText.js":"2","C:\\Users\\Sergey\\Desktop\\quiz-galaxy\\client\\src\\components\\GetAnswers.js":"3","C:\\Users\\Sergey\\Desktop\\quiz-galaxy\\client\\src\\index.js":"4","C:\\Users\\Sergey\\Desktop\\quiz-galaxy\\client\\src\\App.js":"5","C:\\Users\\Sergey\\Desktop\\quiz-galaxy\\client\\src\\components\\LayoutBox\\index.js":"6","C:\\Users\\Sergey\\Desktop\\quiz-galaxy\\client\\src\\components\\LayoutSimple\\index.js":"7","C:\\Users\\Sergey\\Desktop\\quiz-galaxy\\client\\src\\components\\QuestionDisplay\\index.js":"8"},{"size":5326,"mtime":1613273639270,"results":"9","hashOfConfig":"10"},{"size":1855,"mtime":1613274076345,"results":"11","hashOfConfig":"10"},{"size":1863,"mtime":1613275253872,"results":"12","hashOfConfig":"10"},{"size":500,"mtime":1608342412474,"results":"13","hashOfConfig":"10"},{"size":1796,"mtime":1613258907973,"results":"14","hashOfConfig":"10"},{"size":2019,"mtime":1612570408968,"results":"15","hashOfConfig":"10"},{"size":2234,"mtime":1612945431360,"results":"16","hashOfConfig":"10"},{"size":1019,"mtime":1613270660207,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"cm9wjb",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Sergey\\Desktop\\quiz-galaxy\\client\\src\\pages\\makeTest\\index.js",["37"],"C:\\Users\\Sergey\\Desktop\\quiz-galaxy\\client\\src\\components\\GetText.js",["38"],"import React, { Fragment, useState, useEffect } from 'react';\r\nfunction GetText(props) {\r\n    const [answerText, setAnswerText] = useState(props.answer.text);\r\n    const [imgLink, setImgLink] = useState(props.answer.img);\r\n    const [checkBox, setCheckBox] = useState();\r\n    function changeInput(e) {\r\n        setAnswerText(e.target.value)\r\n        sendBack(e.target.value, imgLink);\r\n        console.log(answerText)\r\n    }\r\n    function changeImage(e) {\r\n        setImgLink(e.target.value);\r\n        console.log(imgLink)\r\n        sendBack(answerText, e.target.value);\r\n    }\r\n    function changeCheck(e) {\r\n        (checkBox === 0) ? setCheckBox(1) : setCheckBox(0);\r\n    }\r\n    function sendBack(a, b) {\r\n        let choice = {\r\n            text: a,\r\n            img: b,\r\n            num: props.num\r\n        };\r\n        console.log(choice)\r\n        props.onChange(choice);\r\n    }\r\n    useEffect(() => {\r\n        setAnswerText(props.answer.text);\r\n        if (props.answer.img.length > 0) {\r\n            setCheckBox(1);\r\n            setImgLink(props.answer.img);\r\n        } else {\r\n            setCheckBox(0);\r\n        }\r\n        console.log(checkBox);\r\n    },[]);\r\n    return (\r\n        <Fragment>\r\n            <div >\r\n                <textarea style={{ width: '100%' }} id={\"answer_\" + props.num} value={answerText} onChange={e => changeInput(e)} />\r\n                <label style={{color:'yellow', width:'100%' }}>\r\n                <input type=\"checkbox\" id={\"check_\" + props.num} onChange={e => changeCheck(e)} checked={(checkBox === 1) ? 'checked' : ''} />\r\n                check to add image link</label>\r\n                <input type=\"text\" id={\"pic_\" + props.num} style={{ width: '80%', opacity: checkBox }} value={imgLink} onChange={e => changeImage(e)} />             \r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\nexport default GetText;","C:\\Users\\Sergey\\Desktop\\quiz-galaxy\\client\\src\\components\\GetAnswers.js",["39","40","41"],"import React, { Fragment, useEffect, useState } from 'react';\r\nimport LayoutBox from './LayoutBox';\r\nimport GetText from './GetText.js';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nfunction GetAnswers(props) {\r\n    function handleNewText() {\r\n        let emptyNew = { text: '', img: '', choice: props.correct };\r\n        props.onNew(emptyNew);\r\n\r\n    }\r\n\r\n    function handleChangeText(t) {\r\n        let localArr = props.answers;\r\n        if ((t.text === '') && (t.img === '')) {\r\n            localArr.splice(t.num, 1);\r\n        } else {\r\n            let answerRenew = { text: t.text, img: t.img, correct: props.correct }\r\n            localArr.splice(t.num, 1, answerRenew)\r\n        }\r\n        props.onChange(localArr);\r\n        console.log(localArr)\r\n    }\r\n    function handleDelete(e) {\r\n        props.onDelete(e.target.value)\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <div style={{ width: '100%' }}>\r\n                {props.answers.map((answerOption, j) => {\r\n                    return (\r\n                        <div style={{position:'relative', margin:'5px'}}>\r\n                            <GetText num={j} answer={answerOption} onDelete={e => e.target.value} onNew={e => e.target.value} onChange={(t) => handleChangeText(t)} />\r\n                            <Button style={{position:'absolute', bottom: 0, right: 0}} variant='danger' id={\"eraseBtn_\" + j} value={j} onClick={e => handleDelete(e)}>x</Button>\r\n                        </div>\r\n                    )\r\n                }\r\n                )}\r\n                <Button variant='success' onClick={e => { handleNewText() }}>New</Button>\r\n                {/* <LayoutBox type={1} vis={1} question={'props.question'} checkedMarks={[1]} answers={[{ 'text': '6.96 miles/sec','img': '',  'choice': true }]} /> */}\r\n            </div>\r\n        </Fragment >\r\n    )\r\n}\r\nexport default GetAnswers;","C:\\Users\\Sergey\\Desktop\\quiz-galaxy\\client\\src\\index.js",[],"C:\\Users\\Sergey\\Desktop\\quiz-galaxy\\client\\src\\App.js",["42"],"import React, { useState } from 'react';\nimport fire from './firebase';\nimport LoginContext from './utils/LoginContext';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.scss';\n\n// Components\nimport Header from './components/navbar/Header';\nimport Signup from './components/signup/SignupCard';\nimport Login from './components/login/LoginCard';\nimport testPage from './pages/testPage';\nimport makeTest from './pages/makeTest';\nimport CreateQuizForm from './components/quiz-creation/CreateQuizForm';\n\nfunction App() {\n\tconst [isLoggedIn, setIsLoggedIn] = useState(false);\n\tconst [emailVerified, setEmailVerified] = useState(false);\n\n\tfire.auth().onAuthStateChanged((user) => {\n\t\tuser ? setIsLoggedIn(true) : setIsLoggedIn(false);\n\t\tuser.emailVerified ? setEmailVerified(true) : setEmailVerified(false);\n\t\treturn;\n\t});\n\n\tconsole.log('logged in?', isLoggedIn);\n\n\treturn (\n\t\t<Router>\n\t\t\t<LoginContext.Provider\n\t\t\t\tvalue={{\n\t\t\t\t\tisLoggedIn,\n\t\t\t\t\tsetIsLoggedIn,\n\t\t\t\t\temailVerified,\n\t\t\t\t\tsetEmailVerified,\n\t\t\t\t}}>\n\t\t\t\t<Header />\n\t\t\t\t{!isLoggedIn || !emailVerified ? (\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path=\"/signup\" component={Signup} />\n\t\t\t\t\t\t<Route exact path=\"/login\" component={Login} />\n\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\texact\n\t\t\t\t\t\t\tpath=\"/create\"\n\t\t\t\t\t\t\tcomponent={makeTest}\n\t\t\t\t\t\t\t// component={CreateQuizForm}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Route exact path=\"/test\" component={testPage}/>\n\t\t\t\t\t</Switch>\n\t\t\t\t) : (\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t{/* <h1> Hello World!</h1> */}\n\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\texact\n\t\t\t\t\t\t\tpath=\"/create\"\n\t\t\t\t\t\t\tcomponent={makeTest}\n\t\t\t\t\t\t\t// component={CreateQuizForm}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Route exact path=\"/test\" component={testPage}/>\n\t\t\t\t\t</Switch>\n\t\t\t\t\t\n\t\t\t\t)}\n\t\t\t</LoginContext.Provider>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","C:\\Users\\Sergey\\Desktop\\quiz-galaxy\\client\\src\\components\\LayoutBox\\index.js",[],"C:\\Users\\Sergey\\Desktop\\quiz-galaxy\\client\\src\\components\\LayoutSimple\\index.js",[],"C:\\Users\\Sergey\\Desktop\\quiz-galaxy\\client\\src\\components\\QuestionDisplay\\index.js",["43"],{"ruleId":"44","severity":1,"message":"45","line":13,"column":12,"nodeType":"46","messageId":"47","endLine":13,"endColumn":15},{"ruleId":"48","severity":1,"message":"49","line":37,"column":7,"nodeType":"50","endLine":37,"endColumn":9,"suggestions":"51"},{"ruleId":"44","severity":1,"message":"52","line":1,"column":27,"nodeType":"46","messageId":"47","endLine":1,"endColumn":36},{"ruleId":"44","severity":1,"message":"53","line":1,"column":38,"nodeType":"46","messageId":"47","endLine":1,"endColumn":46},{"ruleId":"44","severity":1,"message":"54","line":2,"column":8,"nodeType":"46","messageId":"47","endLine":2,"endColumn":17},{"ruleId":"44","severity":1,"message":"55","line":14,"column":8,"nodeType":"46","messageId":"47","endLine":14,"endColumn":22},{"ruleId":"44","severity":1,"message":"52","line":1,"column":27,"nodeType":"46","messageId":"47","endLine":1,"endColumn":36},"no-unused-vars","'img' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkBox', 'props.answer.img', and 'props.answer.text'. Either include them or remove the dependency array. If 'setAnswerText' needs the current value of 'props.answer.text', you can also switch to useReducer instead of useState and read 'props.answer.text' in the reducer.","ArrayExpression",["56"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'LayoutBox' is defined but never used.","'CreateQuizForm' is defined but never used.",{"desc":"57","fix":"58"},"Update the dependencies array to be: [checkBox, props.answer.img, props.answer.text]",{"range":"59","text":"60"},[1162,1164],"[checkBox, props.answer.img, props.answer.text]"]